import { generate } from "@graphql-codegen/cli";
import { Injectable } from "@nestjs/common";
import { InjectHasuraModuleOptions } from "./decorators/inject-hasura-module-options.decorator";
import { GraphQLCodegenInput } from "./hasura-codegen.types";
import { HasuraModuleOptions } from "./hasura.module-options";
import { HasuraService } from "./hasura.service";

/**
 * Service for managing code generation for a specific Hasura instance
 */
@Injectable()
export class HasuraCodegenService {
  constructor(
    @InjectHasuraModuleOptions()
    private readonly hasuraModuleOptions: HasuraModuleOptions
  ) {}

  /**
   * Wraps `generate` from `@graphql-codegen/cli`, buildling configuration from injected instance options
   *
   * @throws errors caught from cli#generate after logging config
   */
  async graphqlCodegen(): Promise<void> {
    const config: GraphQLCodegenInput = {
      schema: {
        [HasuraService.hasuraGraphqlUrl(this.hasuraModuleOptions)]: {
          headers: {
            [HasuraService.hasuraAdminSecretHeader(
              this.hasuraModuleOptions
            )]: this.hasuraModuleOptions.adminSecret,
          },
        },
      },
      documents: this.buildDocumentsGlob(),
      overwrite: true,
      generates: {
        [this.generatedFile()]: {
          plugins: [
            "typescript",
            "typescript-operations",
            "typescript-graphql-request",
          ],
        },
      },
    };

    try {
      await generate(config);
    } catch (e) {
      console.log("Failed to run GraphQL codegen for provided configuration:");
      console.log(JSON.stringify(config, null, "\t"));
      throw e;
    }
  }

  /**
   * Computes the path of the file to be generated by codegen, given injected instance options
   */
  generatedFile(): string {
    let path = `${__dirname}/${
      this.hasuraModuleOptions.sdkOptions?.codegen?.outputDir ??
      HasuraCodegenService.DEFAULT_OUTPUT_ROOT
    }`;

    return `${path}/graphql.ts`;
  }

  /**
   * Builds glob string for finding GraphQL Schema, given provided configuration for injected Hasura instance
   */
  buildDocumentsGlob(): string {
    let base = `${__dirname}/**/`;

    return base + "*.graphql";
  }

  static DEFAULT_OUTPUT_ROOT = "hasura-codegen";
}
