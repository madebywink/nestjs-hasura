import { DynamicModule, Module, Provider } from "@nestjs/common";
import { GraphQLClient } from "graphql-request";
import {
  HasuraModuleAsyncOptions,
  HasuraModuleAsyncOptionsClass,
  HasuraModuleOptions,
  HasuraOptionsFactory,
  mergeGraphqlClientOptions,
} from "./hasura.module-options";

import { HasuraService } from "./hasura.service";
import { SYNC_REGISTER_CODEGEN_ENBALED } from "./hasura.error-messages";
import { HasuraCodegenService } from "./hasura-codegen.service";
import { GetSdk } from "./hasura-sdk.types";
import {
  HASURA_GRAPHQL_CLIENT_INJECT,
  HASURA_GRAPHQL_CLIENT_OPTIONS_INJECT,
  HASURA_MODULE_OPTIONS_INJECT,
  HASURA_SDK_INJECT,
  HASURA_SDK_OPTIONS_INJECT,
} from "./hasura.tokens";

@Module({})
export class HasuraModule {
  /**
   * Synchronously register the module. Not compatible with managed code generation
   * @param options
   * @param getSdk
   */
  static register(options: HasuraModuleOptions, getSdk: GetSdk): DynamicModule {
    // Test if provided instances are correctly configured for manual codegen.
    // Synchronous module registration does not support managed codegen
    if (!HasuraService.hasuraInstanceOptionsValidForRootRegistration(options)) {
      throw new Error(SYNC_REGISTER_CODEGEN_ENBALED);
    }

    return {
      module: HasuraModule,
      providers: [
        {
          provide: HASURA_MODULE_OPTIONS_INJECT,
          useValue: options,
        },
        ...HasuraModule.createGraphQLClientProviders(options),
      ],
    };
  }

  static registerAsync(options: HasuraModuleAsyncOptions): DynamicModule {
    const providers: Provider[] = [];

    let optionsProvider: Provider;

    if ("useFactory" in options) {
      optionsProvider = {
        provide: HASURA_MODULE_OPTIONS_INJECT,
        useFactory: options.useFactory,
        inject: options.inject ?? [],
      };
    } else {
      const inject =
        "useExisting" in options ? options.useExisting : options.useClass;

      optionsProvider = {
        provide: HASURA_MODULE_OPTIONS_INJECT,
        useFactory: async (optionsFactory: HasuraOptionsFactory) =>
          await optionsFactory.createHausraOptions(),
        inject: [inject],
      };
    }

    if ("useExisting" in options || "useFactory" in options) {
      providers.push(optionsProvider);
    } else {
      providers.push(optionsProvider);
      providers.push({
        provide: (options as HasuraModuleAsyncOptionsClass).useClass,
        useClass: options.useClass,
      });
    }

    return {
      module: HasuraModule,
      imports: options.imports ?? [],
      providers: [optionsProvider],
    };
  }

  /**
   * Create GraphQL Request Client providers for each instance
   * @param options
   */
  private static createGraphQLClientProviders(
    options: HasuraModuleOptions
  ): Provider[] {
    return [
      {
        provide: HASURA_GRAPHQL_CLIENT_OPTIONS_INJECT,
        useValue: mergeGraphqlClientOptions(options),
      },
      {
        provide: HASURA_GRAPHQL_CLIENT_INJECT,
        useValue: new GraphQLClient(
          HasuraService.hasuraGraphqlUrl(options),
          mergeGraphqlClientOptions(options)
        ),
      },
    ];
  }

  /**
   * Create the providers for the Sdk (generated by GraphQL Code Generator)
   * @param options
   */
  private static createSdkProviders(
    options: HasuraModuleOptions,
    getSdk?: GetSdk
  ): Provider[] {
    return [
      {
        provide: HASURA_SDK_OPTIONS_INJECT,
        useValue: options.sdkOptions,
      },
      {
        provide: HASURA_SDK_INJECT,
        useValue: undefined,
      },
    ];
  }

  /**
   * Gets the generated GraphQL Sdk either from a manually generated getSdk function (as in the case of sync registration)
   * or by dynamically importing the Sdk generated by HasuraCodgenService
   *
   * @param moduleOptions HasuraModuleOptions instance
   * @param client GraphQL Client instance
   * @param codegen HasuraCodegenService instance
   * @param getSdk optional getSdk function in the case of sync registration
   */
  static async getHasuraSdk(
    moduleOptions: HasuraModuleOptions,
    client: GraphQLClient,
    codegen: HasuraCodegenService,
    getSdk?: GetSdk
  ) {
    if (!!getSdk) {
      return getSdk(client);
    }

    try {
      await codegen.graphqlCodegen();
    } catch (e) {
      console.log("Failed to generate Hasura Sdk during module registration");
      console.error(e);
      throw e;
    }
    const generated = await import(codegen.generatedFile());

    if (!("getSdk" in generated)) {
      throw new Error("Generated file missing getSdk");
    }

    return generated.getSdk(
      client,
      moduleOptions.sdkOptions?.codegen?.requestMiddleware ??
        ((x: unknown) => x)
    );
  }
}
